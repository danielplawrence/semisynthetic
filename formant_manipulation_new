########################################################
# Praat script for LPC analysis and resynthesis with
# high-frequency filtering for high quality
# semisynthetic stimuli.
# Created by Daniel Lawrence
#########################################################

morph_duration = 1
modify_f1 = 1
modify_f2 = 1
modify_f3 = 0
modify_f4 = 0
modify_f5 = 0

ref1 =550
ref2 =1650
ref3 =2750
ref4 =3850
ref5 =4950

call selectSounds
call segmentAndExtract
call durationMatching 'source_segment$' 'target_segment$'
call HPfilter 'source_segment$' 5000 500 
call LPfilter 'source_segment$' 5000 500 
call extractSource
call newFilter 'source_segment$' 5 5000 0.025 A_token
call newFilter 'target_segment$' 5 5000 0.025 B_token


call checkFormantGrid A_token Endpoint_A 'source_segment$'
call checkFormantGrid B_token Endpoint_B 'target_segment$'
call cardinalVowels

call interpolateFormants 'source_segment$' 'target_segment$' 8
call morphDuration stimulus_step_1 target_seg_duration 8 75 600
call concatenate 0.05 8

##LPC decomposition
procedure extractSource
	select Sound 'source_segment$'
	Resample... 10000 50
	target_resamp$ = selected$("Sound")
	target_int= Get intensity (dB)
	To LPC (burg)... 16 0.025 0.005 50
	plus Sound 'target_resamp$'
	Filter (inverse)
	Resample... 48000 50
	Scale intensity... target_int
	Rename... whitened_source
	whitened_source$ = selected$("Sound")
endproc

##Prompt user to check the endpoints
procedure checkFormantGrid .agrid$ .name$ .formantname$
	select FormantGrid '.agrid$'
	View & Edit
	editor FormantGrid '.agrid$'
		pause Please check formant grid for '.name$'
		Close
	endeditor
To Formant... 0.01 0.1
Rename... '.formantname$'
endproc

##Duration matching
###In order to calculate values for continua, we need a version of the B endpoint which matches the 
###duration of the source
procedure durationMatching .source$ .target$
###Match the durations of two sounds
###First, get ratio of source to target:
if which_b=1
	select Sound '.source$'
	duration_of_source = Get total duration
	select Sound '.target$'
	duration_of_target = Get total duration
	duration_ratio = duration_of_source/duration_of_target
###Create a manipulation object 

	select Sound '.target$'
	To Manipulation... 0.01 75 600
	target_manip$= selected$("Manipulation")
	Extract duration tier
	target_dur$= selected$("DurationTier")

###Lengthen by the desired amount

	Add point... 0 duration_ratio
	Add point... duration_of_target duration_ratio
		
###Combine with manipulation

select Manipulation 'target_manip$'
plus DurationTier 'target_dur$'
Replace duration tier

select Manipulation 'target_manip$'
Get resynthesis (overlap-add)
Rename... '.target$'_duration_matched
target_segment$=selected$("Sound")
endif
endproc



##Simulate cardinal vowels
procedure cardinalVowels
###Make an empty formantgrid
	Create FormantGrid... Clean 0 source_seg_duration 4 550 1100 60 50
	for f from 1 to 4
		Remove formant points between... 'f' 0 source_seg_duration
		Remove bandwidth points between... 'f' 0 source_seg_duration
	endfor
###Do the synthesis
call synthVowel 'whitened_source$' Clean i_high_front 300 2300 2600 3500 70
call synthVowel 'whitened_source$' Clean a_low_front 800 1150 2400 3400 70
call synthVowel 'whitened_source$' Clean u_high_back 350 800 2300 3100 70
call synthVowel 'whitened_source$' Clean schwa 500 1500 2500 3500 70

	#300 2300 2600 3500 70
	#800 1150 2400 3400 70
	#350 800 2300 3100 70
	#500 1500 2500 3500 70
###Concatenate the vowels
# put the vowels together
	select Sound i_high_front
	plus Sound a_low_front
	plus Sound u_high_back
	plus Sound schwa
	Concatenate recoverably
	select Sound chain
	Rename... Cardinal_vowels
	select TextGrid chain
	Rename... Cardinal_vowels
	select Sound Cardinal_vowels
	plus TextGrid Cardinal_vowels
	View & Edit
	pause Check quality of vowels and re-run script as necessary 
endproc

##Pitch matching
procedure matchPitch
endproc
##

##Intensity matching
procedure matchIntensity
endproc
##


##Hann filtering
procedure HPfilter .target$ .cutoff .cross
	select Sound '.target$'
	Filter (pass Hann band)... 0 .cutoff .cross
	original_LF_intensity = Get intensity (dB)
	To Intensity... 100 0 yes
	Down to IntensityTier
	Rename... '.target$'_LF_portion_intensity
	select Intensity '.target$'_band
	Remove
	select Sound '.target$'_band
	Rename... '.target$'_LF_portion
endproc

procedure LPfilter .target$ .cutoff .cross
	select Sound '.target$'
	Filter (stop Hann band)... 0 .cutoff .cross
	select Sound '.target$'_band
	Rename... '.target$'_HP_portion
endproc	

##Interpolation
procedure interpolateFormants .formanta$ .formantb$ .nsteps

##First thing we need to do is work out a distance matrix between 
##A and B, with a distance at every point for every formant

for f from 1 to minf
select Formant '.formanta$'
	alen= Get number of frames
	To Matrix... f
	Rename... source_f'f'
select Formant '.formantb$'
	blen = Get number of frames
	To Matrix... f
	Rename... target_f'f'
maxlen=max(alen,blen)
	Create simple Matrix... f_'f'_distances 1 maxlen x=0
	for j from 1 to maxlen
		val=Matrix_target_f'f'[1,j]-Matrix_source_f'f'[1,j]
		Set value... 1 j val
	endfor
endfor

##Time-domain conversion
select Formant 'source_segment$'
Copy... clean_grid
Down to Table... yes yes 6 no 3 yes 3 no
for step from 1 to .nsteps
Create FormantGrid... grid_step_'step' 0 source_seg_duration minf 550 1100 60 50
	for f from 1 to minf
		if modify_f'f'=1
		Remove formant points between... 'f' 0 source_seg_duration
		Remove bandwidth points between... 'f' 0 source_seg_duration
		endif
	endfor
	for f from 1 to minf
	#Calculate interval and add points
		if modify_f'f'=1
		for point from 1 to maxlen
			time= Table_clean_grid [point, 2]
			thisdist=Matrix_f_'f'_distances[1,point]/(.nsteps - 1)
			newval= (thisdist*('step'-1)) + Matrix_source_f'f'[1,point]
			select FormantGrid grid_step_'step'
			if newval>0
				Add formant point... 'f' 'time' 'newval'
			endif
		endfor
		endif
		call setBandWidths grid_step_'step' 'f'
	endfor
call makeStimulus 'whitened_source$' grid_step_'step' stimulus_step_'step' 70 
endfor
endproc
##

##Selection of endpoints
procedure selectSounds
	pause Select the source sound
	source$ = selected$ ("Sound")
	source_samplerate = Get sampling frequency
	source_numchannels = Get number of channels
	source_duration = Get total duration
     if source_numchannels = 2
	   select Sound 'source$'
	   Convert to mono
   	source$ = selected$ ("Sound")
	source_samplerate = Get sampling frequency
	source_numchannels = Get number of channels
	source_duration = Get total duration
     endif
	
   beginPause ("Choose B endpoint")
	comment ("How would you like to create the continuum endpoint?")
    choice ("which_b", 1)
       option ("Select B endpoint")
       option ("Generate endpoint by modifiying original")    
     endPause ("Cancel", "OK", 2)
 	if which_b = 1
 		pause Select the sound to be used as B endpoint
		   target$ = selected$ ("Sound")
		   target_samplerate = Get sampling frequency
		   target_numchannels = Get number of channels
		   target_duration = Get total duration
		 if target_numchannels = 2
	 		  select Sound 'target$'
	  		  Convert to mono
   			  target$ = selected$ ("Sound")
			  target_samplerate = Get sampling frequency
			  target_numchannels = Get number of channels
			  target_duration = Get total duration
                  endif
	else
		writeInfoLine: "Generating endpoint by modifying original"
	endif
endproc

##Identification of target segments, preceding context, following context
procedure segmentAndExtract
###First get the target vowels
	select Sound 'source$'
	View & Edit
	editor Sound 'source$'
	pause Select target segment in source token
	Move start of selection to nearest zero crossing
	Move end of selection to nearest zero crossing
	source_seg_start_time = Get start of selection
	source_seg_end_time = Get end of selection
	source_seg_duration = Get selection length
	Extract selected sound (time from 0)
	Close
	Rename: "Original A token"
	source_segment$ = selected$("Sound")
	endeditor
		if which_b = 1
			select Sound 'target$'
			View & Edit
			editor Sound 'target$'
			pause Select target segment in target token
			Move start of selection to nearest zero crossing
			Move end of selection to nearest zero crossing
			target_seg_start_time = Get start of selection
			target_seg_end_time = Get end of selection
			target_seg_duration = Get selection length
			Extract selected sound (time from 0)
			Close
			Rename: "Original B token"
			target_segment$ = selected$("Sound")
			endeditor
		else
			select Sound 'source_segment$'
			Copy... Copy of source token
			target_segment$ = selected$("Sound")
			target_seg_duration = Get total duration
		endif
###Now prompt user for preceding and following context for synthesis
####Preceding
beginPause ("Choose source of preceding context")
	comment ("How would you like to generate the preceding context?")
    choice ("preceding_source", 1)
       option ("From token A (source)")
       option ("From token B (target)")     
       option ("Generate silence:")    
		positive ("duration_of_silence","0.05")
     endPause ("Cancel", "OK", 2)
if preceding_source = 1
	select Sound 'source$'
	View & Edit
	editor Sound 'source$'
	pause Select preceding segment in source token
	Move start of selection to nearest zero crossing
	Move end of selection to nearest zero crossing
	pre_seg_start_time = Get start of selection
	pre_seg_end_time = Get end of selection
	pre_seg_duration = Get selection length
	Extract selected sound (time from 0)
	Close
	Rename: "preceding_context"
	endeditor
endif
if preceding_source = 2
	select Sound 'target$'
	View & Edit
	editor Sound 'target$'
	pause Select preceding segment in source token
	Move start of selection to nearest zero crossing
	Move end of selection to nearest zero crossing
	pre_seg_start_time = Get start of selection
	pre_seg_end_time = Get end of selection
	pre_seg_duration = Get selection length
	Extract selected sound (time from 0)
	Close
	Rename: "preceding_context"
	endeditor
endif
if preceding_source = 3
	Create Sound from formula: "preceding_context", 1, 'duration_of_silence', 1, 48000, "0"
endif
preceding_segment$ = selected$("Sound")
####Following
beginPause ("Choose source of following context")
	comment ("How would you like to generate the following context?")
    choice ("following_source", 1)
       option ("From token A (source)")
       option ("From token B (target)")     
       option ("Generate silence:")    
		positive ("duration_of_silence","0.05")
     endPause ("Cancel", "OK", 2)
if following_source = 1
	select Sound 'source$'
	View & Edit
	editor Sound 'source$'
	pause Select following segment in source token
	Move start of selection to nearest zero crossing
	Move end of selection to nearest zero crossing
	fol_seg_start_time = Get start of selection
	fol_seg_end_time = Get end of selection
	fol_seg_duration = Get selection length
	Extract selected sound (time from 0)
	Close
	Rename: "following_context"
	endeditor
endif
if following_source = 2
	select Sound 'target$'
	View & Edit
	editor Sound 'target$'
	pause Select following segment in source token
	Move start of selection to nearest zero crossing
	Move end of selection to nearest zero crossing
	fol_seg_start_time = Get start of selection
	fol_seg_end_time = Get end of selection
	fol_seg_duration = Get selection length
	Extract selected sound (time from 0)
	Close
	Rename: "following_context"
	endeditor
endif
if following_source = 3
	Create Sound from formula: "following_context", 1, 'duration_of_silence', 1, 48000, "0"
endif
following_segment$ = selected$("Sound")
endproc

##Formantgrid creation and modification
procedure newFilter .sound$ nformants maxf winLen .name$
	select Sound '.sound$'
	To Formant (burg)... 0 nformants maxf winLen 50
	current$=selected$("Formant")
	minf=Get minimum number of formants
	Track... minf ref1 ref2 ref3 ref4 ref5 1 1 1
	new$=selected$("Formant")
	Down to FormantGrid
	Rename... '.name$'
	select Formant 'current$'
	Remove
endproc

#Duration morphing 
##Get duration for each end of the continuum
##Interpolate, then work out the continuum steps
##Lengthen the sounds

procedure morphDuration .first_step$ .target_dur .nsteps .minpitch .maxpitch
if morph_duration =1	
select Sound '.first_step$'
	first_length=Get total duration
	morphing_distance = abs(.target_dur-first_length)
	morphing_amount = morphing_distance/(.nsteps-1)
		for step from 1 to .nsteps
			target_length = first_length+(morphing_amount*(step-1))
			this_factor = target_length/first_length
			select Sound stimulus_step_'step'
			current$=selected$("Sound")
			Lengthen (overlap-add)... .minpitch .maxpitch this_factor
			new$=selected$("Sound")
			select Sound 'current$'
			Remove
			select Sound 'new$'
			Rename... stimulus_step_'step'
		endfor
endif
endproc
#Filter FormantGrid
procedure makeStimulus .source$ .filter$ .name$ .int
	select Sound '.source$'
	plus FormantGrid '.filter$'
	Filter
	current$=selected$("Sound")
###LP filter
call HPfilter 'current$' 5000 500
###Delete original
select Sound 'current$'
plus IntensityTier 'current$'_LF_portion_intensity
Remove
###Restore HF energy
call addHF 'current$'_LF_portion 'current$'_HP_portion
Scale intensity... '.int'
Rename... '.name$'
endproc

##Source-filter resynthesis
###Set formant and bandwidth values
procedure synthVowel .source$ .filter$ .name$ .f1 .f2 .f3 .f4 .int
	select FormantGrid '.filter$'
	Copy... '.name$'
for .formant from 1 to minf
	.f5 = 4500
	select FormantGrid '.name$'
	Add formant point... '.formant' 0 .f'.formant'
	Add bandwidth point... '.formant' 0.1 (60+(10*'.formant'))
endfor
###Combine with source
	select Sound '.source$'
	plus FormantGrid '.name$'
	Filter
	Rename... '.name$'
###LP filter
call HPfilter '.name$' 5000 500
###Delete original
select Sound '.name$'
Remove
###Restore HF energy
call addHF '.name$'_LF_portion '.target$'_HP_portion
Scale intensity... '.int'
Rename... '.name$'
endproc


##
procedure setBandWidths .grid$ .formant
	f1BW = 75
	f2BW = 85
	f3BW = 90
	f4BW = 100
	f5BW = 210
	select FormantGrid '.grid$'
		if .formant =1
			Add bandwidth point... 1 0.5 f1BW
		endif
		if .formant =2
			Add bandwidth point... 2 0.5 f2BW
		endif
		if .formant =3
			Add bandwidth point... 3 0.5 f3BW
		endif
		if .formant=4
			Add bandwidth point... 4 0.5 f4BW
		endif
		if .formant=5
			Add bandwidth point... 5 0.5 f5BW
		endif

endproc

##HF component restoration 
procedure addHF .sound$ .filteredsound$
	select Sound '.sound$'
	Formula... self [col] + Sound_Original_A_token_HP_portion [col]
endproc

##Concatenate 
procedure concatenate .cross .nsteps
		for i from 1 to .nsteps
			select Sound 'preceding_segment$'
			plus Sound stimulus_step_'i'
			Concatenate with overlap... '.cross'
			temp_chain$=selected$("Sound")
			select Sound 'following_segment$'
			Copy... following_segment_temp
			select Sound 'temp_chain$'
			plus Sound following_segment_temp
			Concatenate with overlap... '.cross'
			Rename... stimulus_item_'i'
			select Sound 'temp_chain$'
			plus Sound following_segment_temp
			Remove
		endfor
		select Sound stimulus_item_1
		for i from 2 to .nsteps
		plus Sound stimulus_item_'i'
		endfor
		Concatenate recoverably
		select Sound chain
		Rename... Synthesized continuum
		select TextGrid chain
		Rename... Synthesized continuum
		select Sound Synthesized_continuum
		plus TextGrid Synthesized_continuum
		View & Edit
endproc
